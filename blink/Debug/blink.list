
blink.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000258  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000388  08000390  00010390  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000388  08000388  00010390  2**0
                  CONTENTS
  4 .ARM          00000000  08000388  08000388  00010390  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000388  08000390  00010390  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000388  08000388  00010388  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800038c  0800038c  0001038c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010390  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  08000390  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08000390  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010390  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000103b9  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000753  00000000  00000000  000103fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000001d9  00000000  00000000  00010b4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000070  00000000  00000000  00010d28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000004a  00000000  00000000  00010d98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000ff24  00000000  00000000  00010de2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000638  00000000  00000000  00020d06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000547d2  00000000  00000000  0002133e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000010c  00000000  00000000  00075b10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  00075c1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000370 	.word	0x08000370

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000370 	.word	0x08000370

08000170 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	6039      	str	r1, [r7, #0]
 800017a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800017c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000180:	2b00      	cmp	r3, #0
 8000182:	db0a      	blt.n	800019a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000184:	683b      	ldr	r3, [r7, #0]
 8000186:	b2da      	uxtb	r2, r3
 8000188:	490c      	ldr	r1, [pc, #48]	; (80001bc <__NVIC_SetPriority+0x4c>)
 800018a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800018e:	0112      	lsls	r2, r2, #4
 8000190:	b2d2      	uxtb	r2, r2
 8000192:	440b      	add	r3, r1
 8000194:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000198:	e00a      	b.n	80001b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800019a:	683b      	ldr	r3, [r7, #0]
 800019c:	b2da      	uxtb	r2, r3
 800019e:	4908      	ldr	r1, [pc, #32]	; (80001c0 <__NVIC_SetPriority+0x50>)
 80001a0:	79fb      	ldrb	r3, [r7, #7]
 80001a2:	f003 030f 	and.w	r3, r3, #15
 80001a6:	3b04      	subs	r3, #4
 80001a8:	0112      	lsls	r2, r2, #4
 80001aa:	b2d2      	uxtb	r2, r2
 80001ac:	440b      	add	r3, r1
 80001ae:	761a      	strb	r2, [r3, #24]
}
 80001b0:	bf00      	nop
 80001b2:	370c      	adds	r7, #12
 80001b4:	46bd      	mov	sp, r7
 80001b6:	bc80      	pop	{r7}
 80001b8:	4770      	bx	lr
 80001ba:	bf00      	nop
 80001bc:	e000e100 	.word	0xe000e100
 80001c0:	e000ed00 	.word	0xe000ed00

080001c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80001c4:	b580      	push	{r7, lr}
 80001c6:	b082      	sub	sp, #8
 80001c8:	af00      	add	r7, sp, #0
 80001ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80001cc:	687b      	ldr	r3, [r7, #4]
 80001ce:	3b01      	subs	r3, #1
 80001d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80001d4:	d301      	bcc.n	80001da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80001d6:	2301      	movs	r3, #1
 80001d8:	e00f      	b.n	80001fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80001da:	4a0a      	ldr	r2, [pc, #40]	; (8000204 <SysTick_Config+0x40>)
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	3b01      	subs	r3, #1
 80001e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80001e2:	210f      	movs	r1, #15
 80001e4:	f04f 30ff 	mov.w	r0, #4294967295
 80001e8:	f7ff ffc2 	bl	8000170 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80001ec:	4b05      	ldr	r3, [pc, #20]	; (8000204 <SysTick_Config+0x40>)
 80001ee:	2200      	movs	r2, #0
 80001f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80001f2:	4b04      	ldr	r3, [pc, #16]	; (8000204 <SysTick_Config+0x40>)
 80001f4:	2207      	movs	r2, #7
 80001f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80001f8:	2300      	movs	r3, #0
}
 80001fa:	4618      	mov	r0, r3
 80001fc:	3708      	adds	r7, #8
 80001fe:	46bd      	mov	sp, r7
 8000200:	bd80      	pop	{r7, pc}
 8000202:	bf00      	nop
 8000204:	e000e010 	.word	0xe000e010

08000208 <main>:
void delay_ms(uint32_t ms);

volatile uint32_t Tick;

int main(void)
{
 8000208:	b580      	push	{r7, lr}
 800020a:	af00      	add	r7, sp, #0
	configureLED();
 800020c:	f000 f81a 	bl	8000244 <configureLED>

	SysTick_Config(8000); // 1ms (8MHz/1000ms)
 8000210:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8000214:	f7ff ffd6 	bl	80001c4 <SysTick_Config>


	while(1)
	{
		GPIOC->BSRR |= GPIO_BSRR_BR13; /* '0' on GPIO13 */
 8000218:	4b09      	ldr	r3, [pc, #36]	; (8000240 <main+0x38>)
 800021a:	691b      	ldr	r3, [r3, #16]
 800021c:	4a08      	ldr	r2, [pc, #32]	; (8000240 <main+0x38>)
 800021e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000222:	6113      	str	r3, [r2, #16]
		delay_ms(100);
 8000224:	2064      	movs	r0, #100	; 0x64
 8000226:	f000 f83d 	bl	80002a4 <delay_ms>
		GPIOC->BSRR |= GPIO_BSRR_BS13; /* '1' on GPIO13 */
 800022a:	4b05      	ldr	r3, [pc, #20]	; (8000240 <main+0x38>)
 800022c:	691b      	ldr	r3, [r3, #16]
 800022e:	4a04      	ldr	r2, [pc, #16]	; (8000240 <main+0x38>)
 8000230:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000234:	6113      	str	r3, [r2, #16]
		delay_ms(100);
 8000236:	2064      	movs	r0, #100	; 0x64
 8000238:	f000 f834 	bl	80002a4 <delay_ms>
		GPIOC->BSRR |= GPIO_BSRR_BR13; /* '0' on GPIO13 */
 800023c:	e7ec      	b.n	8000218 <main+0x10>
 800023e:	bf00      	nop
 8000240:	40011000 	.word	0x40011000

08000244 <configureLED>:
}



void configureLED(void)
{
 8000244:	b480      	push	{r7}
 8000246:	af00      	add	r7, sp, #0
	/* LED is connected to PC13 on the APB2 bus */

	RCC->APB2ENR |= RCC_APB2ENR_IOPCEN; /* I/O port C clock enable */
 8000248:	4b0d      	ldr	r3, [pc, #52]	; (8000280 <configureLED+0x3c>)
 800024a:	699b      	ldr	r3, [r3, #24]
 800024c:	4a0c      	ldr	r2, [pc, #48]	; (8000280 <configureLED+0x3c>)
 800024e:	f043 0310 	orr.w	r3, r3, #16
 8000252:	6193      	str	r3, [r2, #24]

	GPIOC->CRH |= GPIO_CRH_MODE13_0; /* Output mode, max speed 10 MHz */
 8000254:	4b0b      	ldr	r3, [pc, #44]	; (8000284 <configureLED+0x40>)
 8000256:	685b      	ldr	r3, [r3, #4]
 8000258:	4a0a      	ldr	r2, [pc, #40]	; (8000284 <configureLED+0x40>)
 800025a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800025e:	6053      	str	r3, [r2, #4]
	GPIOC->CRH &= ~(GPIO_CRH_MODE13_1);
 8000260:	4b08      	ldr	r3, [pc, #32]	; (8000284 <configureLED+0x40>)
 8000262:	685b      	ldr	r3, [r3, #4]
 8000264:	4a07      	ldr	r2, [pc, #28]	; (8000284 <configureLED+0x40>)
 8000266:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800026a:	6053      	str	r3, [r2, #4]

	GPIOC->CRH &= ~(GPIO_CRH_CNF13); /* General purpose output push-pull */
 800026c:	4b05      	ldr	r3, [pc, #20]	; (8000284 <configureLED+0x40>)
 800026e:	685b      	ldr	r3, [r3, #4]
 8000270:	4a04      	ldr	r2, [pc, #16]	; (8000284 <configureLED+0x40>)
 8000272:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8000276:	6053      	str	r3, [r2, #4]
}
 8000278:	bf00      	nop
 800027a:	46bd      	mov	sp, r7
 800027c:	bc80      	pop	{r7}
 800027e:	4770      	bx	lr
 8000280:	40021000 	.word	0x40021000
 8000284:	40011000 	.word	0x40011000

08000288 <SysTick_Handler>:

void SysTick_Handler(void)
{
 8000288:	b480      	push	{r7}
 800028a:	af00      	add	r7, sp, #0
	Tick++;
 800028c:	4b04      	ldr	r3, [pc, #16]	; (80002a0 <SysTick_Handler+0x18>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	3301      	adds	r3, #1
 8000292:	4a03      	ldr	r2, [pc, #12]	; (80002a0 <SysTick_Handler+0x18>)
 8000294:	6013      	str	r3, [r2, #0]
}
 8000296:	bf00      	nop
 8000298:	46bd      	mov	sp, r7
 800029a:	bc80      	pop	{r7}
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop
 80002a0:	2000001c 	.word	0x2000001c

080002a4 <delay_ms>:

void delay_ms(uint32_t ms)
{
 80002a4:	b480      	push	{r7}
 80002a6:	b085      	sub	sp, #20
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	6078      	str	r0, [r7, #4]
	uint32_t StartTime = Tick;
 80002ac:	4b08      	ldr	r3, [pc, #32]	; (80002d0 <delay_ms+0x2c>)
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	60fb      	str	r3, [r7, #12]

	while(Tick < (StartTime + ms))
 80002b2:	bf00      	nop
 80002b4:	68fa      	ldr	r2, [r7, #12]
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	441a      	add	r2, r3
 80002ba:	4b05      	ldr	r3, [pc, #20]	; (80002d0 <delay_ms+0x2c>)
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	429a      	cmp	r2, r3
 80002c0:	d8f8      	bhi.n	80002b4 <delay_ms+0x10>
	{
		//do nothing
	}
}
 80002c2:	bf00      	nop
 80002c4:	bf00      	nop
 80002c6:	3714      	adds	r7, #20
 80002c8:	46bd      	mov	sp, r7
 80002ca:	bc80      	pop	{r7}
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop
 80002d0:	2000001c 	.word	0x2000001c

080002d4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002d4:	480d      	ldr	r0, [pc, #52]	; (800030c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002d6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002d8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002dc:	480c      	ldr	r0, [pc, #48]	; (8000310 <LoopForever+0x6>)
  ldr r1, =_edata
 80002de:	490d      	ldr	r1, [pc, #52]	; (8000314 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002e0:	4a0d      	ldr	r2, [pc, #52]	; (8000318 <LoopForever+0xe>)
  movs r3, #0
 80002e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002e4:	e002      	b.n	80002ec <LoopCopyDataInit>

080002e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002ea:	3304      	adds	r3, #4

080002ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002f0:	d3f9      	bcc.n	80002e6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002f2:	4a0a      	ldr	r2, [pc, #40]	; (800031c <LoopForever+0x12>)
  ldr r4, =_ebss
 80002f4:	4c0a      	ldr	r4, [pc, #40]	; (8000320 <LoopForever+0x16>)
  movs r3, #0
 80002f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002f8:	e001      	b.n	80002fe <LoopFillZerobss>

080002fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002fc:	3204      	adds	r2, #4

080002fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000300:	d3fb      	bcc.n	80002fa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000302:	f000 f811 	bl	8000328 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000306:	f7ff ff7f 	bl	8000208 <main>

0800030a <LoopForever>:

LoopForever:
  b LoopForever
 800030a:	e7fe      	b.n	800030a <LoopForever>
  ldr   r0, =_estack
 800030c:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000310:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000314:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000318:	08000390 	.word	0x08000390
  ldr r2, =_sbss
 800031c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000320:	20000020 	.word	0x20000020

08000324 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000324:	e7fe      	b.n	8000324 <ADC1_2_IRQHandler>
	...

08000328 <__libc_init_array>:
 8000328:	b570      	push	{r4, r5, r6, lr}
 800032a:	2600      	movs	r6, #0
 800032c:	4d0c      	ldr	r5, [pc, #48]	; (8000360 <__libc_init_array+0x38>)
 800032e:	4c0d      	ldr	r4, [pc, #52]	; (8000364 <__libc_init_array+0x3c>)
 8000330:	1b64      	subs	r4, r4, r5
 8000332:	10a4      	asrs	r4, r4, #2
 8000334:	42a6      	cmp	r6, r4
 8000336:	d109      	bne.n	800034c <__libc_init_array+0x24>
 8000338:	f000 f81a 	bl	8000370 <_init>
 800033c:	2600      	movs	r6, #0
 800033e:	4d0a      	ldr	r5, [pc, #40]	; (8000368 <__libc_init_array+0x40>)
 8000340:	4c0a      	ldr	r4, [pc, #40]	; (800036c <__libc_init_array+0x44>)
 8000342:	1b64      	subs	r4, r4, r5
 8000344:	10a4      	asrs	r4, r4, #2
 8000346:	42a6      	cmp	r6, r4
 8000348:	d105      	bne.n	8000356 <__libc_init_array+0x2e>
 800034a:	bd70      	pop	{r4, r5, r6, pc}
 800034c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000350:	4798      	blx	r3
 8000352:	3601      	adds	r6, #1
 8000354:	e7ee      	b.n	8000334 <__libc_init_array+0xc>
 8000356:	f855 3b04 	ldr.w	r3, [r5], #4
 800035a:	4798      	blx	r3
 800035c:	3601      	adds	r6, #1
 800035e:	e7f2      	b.n	8000346 <__libc_init_array+0x1e>
 8000360:	08000388 	.word	0x08000388
 8000364:	08000388 	.word	0x08000388
 8000368:	08000388 	.word	0x08000388
 800036c:	0800038c 	.word	0x0800038c

08000370 <_init>:
 8000370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000372:	bf00      	nop
 8000374:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000376:	bc08      	pop	{r3}
 8000378:	469e      	mov	lr, r3
 800037a:	4770      	bx	lr

0800037c <_fini>:
 800037c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800037e:	bf00      	nop
 8000380:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000382:	bc08      	pop	{r3}
 8000384:	469e      	mov	lr, r3
 8000386:	4770      	bx	lr
